package com.alessandro.cursomc.domain;

import java.io.Serializable;

import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnore;

@Entity
@Table(name="item_pedido")
public class ItemPedido implements Serializable{
//Tenho que criara um classe (ItemPedidoPK) que é a chave composta contendo as duas outras classes(Produto e Pedido)
//Tem que criar o get de Produto/Pedido	
//HashCode e Equal somente nessa classe (ItemPedido), não fazer nada na classe(ItemPedidoPK)
	
	
	private static final long serialVersionUID = 1L;
	
	@JsonIgnore //Devido a chave composta, NÃO serializa Pedido/Prodoto inclusive os "get" (Referencia Ciclica : Expected ',' instead of 't')
	@EmbeddedId  // É um ID imbutido em um tipo auxiliar : É para criar a chave composta no DB
	private ItemPedidoPK id = new ItemPedidoPK();
	
	private Double desconto;
	private Integer quantidade;
	private Double preco;
	
	
	public ItemPedido() {
		
	}


	//Retirar ItemPedidoPK do contrutor e colocar (Pedido e Produto)
	public ItemPedido(Pedido pedido, Produto produto, Double desconto, Integer quantidade, Double preco) {
		super();
		this.id.setPedido(pedido);
		this.id.setProduto(produto);
		this.desconto = desconto;
		this.quantidade = quantidade;
		this.preco = preco;
	}

	public Produto getProduto() {
		return id.getProduto();
	}
	@JsonIgnore  //  Devido a chave composta, NÃO serializa Pedido/Prodoto (Referencia Ciclica : Expected ',' instead of 't')
	public Pedido getPedido() {
		return id.getPedido();
	}

	public ItemPedidoPK getId() {
		return id;
	}


	public void setId(ItemPedidoPK id) {
		this.id = id;
	}


	public Double getDesconto() {
		return desconto;
	}


	public void setDesconto(Double desconto) {
		this.desconto = desconto;
	}


	public Integer getQuantidade() {
		return quantidade;
	}


	public void setQuantidade(Integer quantidade) {
		this.quantidade = quantidade;
	}


	public Double getPreco() {
		return preco;
	}


	public void setPreco(Double preco) {
		this.preco = preco;
	}


	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}


	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ItemPedido other = (ItemPedido) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}
	
	
}
